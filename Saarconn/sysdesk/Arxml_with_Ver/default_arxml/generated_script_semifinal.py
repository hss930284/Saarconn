import xml.etree.ElementTree as ET

def remove_namespaces(element):
    """
    Removes namespace prefixes from element tags.

    Args:
        element: The root element of the XML tree.

    Returns:
        The modified element with namespaces removed.
    """
    for elem in element.iter():
        if '}' in elem.tag:
            elem.tag = elem.tag.split('}', 1)[1]  # Remove namespace prefix
    return element

def indent(elem, level=0):
    """
    Adds indentation to the XML tree.
    """
    i = "\n" + level*"  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i


def create_arxml():
    """
    Creates an ARXML file with the specified structure.
    """
    root = ET.Element("AUTOSAR", 
                     attrib={
                         "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
                         "xmlns": "http://autosar.org/schema/r4.0",
                         "xsi:schemaLocation": "http://autosar.org/schema/r4.0 AUTOSAR_00051.xsd"
                     })
    ar_packages = ET.SubElement(root, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '5983c226-f5b2-4ba1-958d-32fe5f2fde51'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'AUTOSAR'
    ar_packages = ET.SubElement(ar_package, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'AUTOSAR_GenDef'
    ar_packages = ET.SubElement(ar_package, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'BaseTypes'
    category = ET.SubElement(ar_package, 'CATEGORY')
    category.text = 'STANDARD'
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'void'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'void'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'VOID'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = 'VOID'
    native_declaration = ET.SubElement(sw_base_type, 'NATIVE-DECLARATION')
    native_declaration.text = 'void'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'AUTOSAR_PhysicalUnits'
    long_name = ET.SubElement(ar_package, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'AUTOSAR'
    l_4.attrib = {'L': 'EN'}
    ar_packages = ET.SubElement(ar_package, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'PhysicalDimensions'
    category = ET.SubElement(ar_package, 'CATEGORY')
    category.text = 'STANDARD'
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Amnt1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Quantity of substance'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '1'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'I1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Electric Current'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '1'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Illmn1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Luminous intensity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '1'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Length'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len1M1TiNeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Force'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len1M1TiNeg2INeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Permeability'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '-2'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len1M1TiNeg2_1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Electrical Energy Consumption'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len1M1TiNeg3INeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Electric Field Strength / Electric intensity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '-1'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len1M1TiNeg3TNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Thermal Conductivity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '-1'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len1TiNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Velocity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len1TiNeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Acceleration'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len1TiNeg3'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Acceleration Time Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Area'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Moment of Inertia'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Angular Momentum'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Torque'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg2AmntNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Molar Energy'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '-1'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg2INeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Magnetic Flux'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '-1'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg2INeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Inductance'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '-2'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg2TNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Heat Capacity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '-1'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg2TNeg1AmntNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Molar Heat Capacity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '-1'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '-1'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg2_1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Energy'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg3'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Torque Time Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg3INeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Voltage'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '-1'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg3INeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Electric Resistance'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '-2'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg3_1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Power'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg4'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Power Time Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-4'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2M1TiNeg4INeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Voltage Time Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-4'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '-1'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2Ti1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kinematic Viscosity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2TiNeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Specific Heat'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2TiNeg2TNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Specific Heat Capacity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '-1'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len2_1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Volume Per Distance / Fuel Consumption'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len3'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Volume'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len3MNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Specific Volume'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '-1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len3TiNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Volumetric Flow'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Len3TiNeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Volumetric Flow Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Inverse Length'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg1M1TiNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Dynamic Viscosity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg1M1TiNeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Pressure'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg1M1TiNeg2_1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Pressure by Angle'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg1M1TiNeg3'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Pressure Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-1'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg2Illmn1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Illuminance'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '1'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg2MNeg1Ti3I2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Electrical Conductance'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '-1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '2'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg2MNeg1Ti4I2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Capacitance'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-2'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '-1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '4'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '2'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg3Amnt1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Concentration'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '1'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg3M1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Mass Density'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg3MNeg1Ti2I2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Electrical Conductivity Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '-1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '2'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg3MNeg1Ti3I2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Electrical Conductivity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '-1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '2'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg3Ti1I1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Electric Charge Density'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '1'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg3Ti1I1_1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Pressure per Voltage'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '1'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg3TiNeg1Amnt1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Reaction Rate'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-3'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '1'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'LenNeg4M1TiNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Pressure per Volumetric Flow / Flow Resistance'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '-4'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'M1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Mass'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'M1AmntNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Molar Mass'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '-1'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'M1TiNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Mass Flow'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'M1TiNeg1_1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Translational Dumping'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'M1TiNeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Surface Tension'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'M1TiNeg2INeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Magnetic Flux Density, Magnetic Induction'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '-1'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'M1TiNeg3TNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Heat Transfer Coefficient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '1'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-3'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '-1'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'NoDimension'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Dimensionless'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'NoDimension_1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Ratio'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'NoDimension_2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Angle'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'NoDimension_5'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Logarithmic Ratio'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'NoDimension_6'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Amount of Data'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'T1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Absolute Temperature'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '1'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'T1I1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Electric Charge'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '1'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'T1_1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Relative Temperature, Temperature Difference'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '0'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '1'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'Ti1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Time'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'TiNeg1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Frequency'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'TiNeg1Amnt1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Catalytic Activity'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '1'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'TiNeg1I1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Electric Current Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '1'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'TiNeg1T1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Temperature Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '1'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'TiNeg1_1'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Ratio Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'TiNeg1_2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Rotational Speed'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'TiNeg1_3'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Transfer Rate'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-1'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    physical_dimension = ET.SubElement(elements, 'PHYSICAL-DIMENSION')
    short_name = ET.SubElement(physical_dimension, 'SHORT-NAME')
    short_name.text = 'TiNeg2'
    long_name = ET.SubElement(physical_dimension, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Rotational Speed Gradient'
    l_4.attrib = {'L': 'EN'}
    length_exp = ET.SubElement(physical_dimension, 'LENGTH-EXP')
    length_exp.text = '0'
    mass_exp = ET.SubElement(physical_dimension, 'MASS-EXP')
    mass_exp.text = '0'
    time_exp = ET.SubElement(physical_dimension, 'TIME-EXP')
    time_exp.text = '-2'
    current_exp = ET.SubElement(physical_dimension, 'CURRENT-EXP')
    current_exp.text = '0'
    temperature_exp = ET.SubElement(physical_dimension, 'TEMPERATURE-EXP')
    temperature_exp.text = '0'
    molar_amount_exp = ET.SubElement(physical_dimension, 'MOLAR-AMOUNT-EXP')
    molar_amount_exp.text = '0'
    luminous_intensity_exp = ET.SubElement(physical_dimension, 'LUMINOUS-INTENSITY-EXP')
    luminous_intensity_exp.text = '0'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'Units'
    category = ET.SubElement(ar_package, 'CATEGORY')
    category.text = 'STANDARD'
    reference_bases = ET.SubElement(ar_package, 'REFERENCE-BASES')
    reference_base = ET.SubElement(reference_bases, 'REFERENCE-BASE')
    short_label = ET.SubElement(reference_base, 'SHORT-LABEL')
    short_label.text = 'PhysicalDimensions'
    is_default = ET.SubElement(reference_base, 'IS-DEFAULT')
    is_default.text = 'false'
    package_ref = ET.SubElement(reference_base, 'PACKAGE-REF')
    package_ref.text = '/AUTOSAR/AUTOSAR_PhysicalUnits/PhysicalDimensions'
    package_ref.attrib = {'DEST': 'AR-PACKAGE'}
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Ampr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Ampere'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'A'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'I1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'AmprPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Ampere Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'A/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1I1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'AmprSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Amperesecond'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'As'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'T1I1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Bar'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Bar'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'bar'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1E-05'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg1M1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'BarPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Bar Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'bar/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1E-05'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg1M1TiNeg3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Bel'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Bel'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'B'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'NoDimension_5'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Bit'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Bit'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'bit'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'NoDimension_6'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'BitPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Bit Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'bit/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'BytPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Byte Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Byte/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.125'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Byte'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Byte'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Byte'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.125'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'NoDimension_6'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Cd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Candela'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'cd'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Illmn1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'CentiMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Centimeter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'cm'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '100'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'CentiMtrSqd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Square Centimeter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'cm^2'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '10000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Coulomb'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Coulomb'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'C'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'T1I1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Day'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Day'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'd'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1.15740740740741E-05'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Ti1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'DeciBel'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Decibel'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'dB'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '10'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'NoDimension_5'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Deg'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Degree'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '°'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '360'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'NoDimension_2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'DegCgrd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Degree Celsius (Absolute Temperature)'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '°C'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '-273.15'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'T1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'DegPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Degree Per Sec'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '°/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '360'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Frd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Farad'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'F'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg2MNeg1Ti4I2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Gr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Gram'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'g'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'GrPerLtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Gram Per Liter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'g/l'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg3M1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'GrPerMol'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Gram Per Mole'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'g/mol'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1AmntNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'GrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Gram Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'g/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'HectoPa'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Hectopascal'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'hPa'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.01'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg1M1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'HectoPaPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Hectopascal Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'hPa/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.01'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg1M1TiNeg3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'HectoPaPerVolt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Hectopascal Per Volt'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'hPa/V'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.01'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg3Ti1I1_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'HectoPaSecPerMtrCubd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Hectopascal Per Cubic Meter Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'hPa/((m^3)/s)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.01'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg4M1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Henry'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Henry'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'H'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2INeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'HenryPerMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Henry Per Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'H/m'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1M1TiNeg2INeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Hr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Hour'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'h'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.000277777777777778'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Ti1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Hz'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Hertz'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Hz'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Jou'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Joule'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'J'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'JouPerKelvin'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Joule Per Kelvin'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'J/K'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2TNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'JouPerKiloGr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Joule Per Kilogram'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'J/kg'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'JouPerKiloGrPerKelvin'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Joule Per Kilogram Per Kelvin'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'J/(kg*K)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2TiNeg2TNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'JouPerMol'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Joule Per Mole'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'J/mol'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2AmntNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'JouPerMolPerKelvin'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Joule Per Mole Per Kelvin'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'J/(mol*K)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2TNeg1AmntNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Kat'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Katal'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kat'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1Amnt1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KelvinAbslt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kelvin (Absolute Temperature)'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'K'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'T1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KelvinPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kelvin Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'K/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1T1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KelvinRel'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kelvin (Relative Temperature, Temperature Difference)'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'K'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'T1_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloBitPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilobit Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kbit/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloGr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilogram'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kg'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloGrPerHr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilogram Per Hour'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kg/h'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '3600'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloGrPerMtrCubd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilogram Per Cubic Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kg/(m^3)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg3M1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloGrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilogram Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kg/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloGrSqrMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilogram Square Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kg*(m^2)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloHz'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilohertz'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kHz'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloJou'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilojoule'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kJ'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilometer'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'km'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloMtrPerHr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilometer Per Hour'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'km/h'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '3.6'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloMtrPerHrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilometer Per Hour Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '(km/h)/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '3.6'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloNwt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilonewton'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kN'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1M1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloNwtMtrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilonewtonmeter Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '(kN*m)/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloOhm'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kiloohm'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kΩ'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3INeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloVolt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilovolt'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kV'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloWatt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilowatt'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kW'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloWattHr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilowatthour'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kWh'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '2.77777777777778E-07'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'KiloWattHrPer100KiloMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Kilowatthour Per 100 Kilometer'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'kWh/(100*km)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.0277777777777778'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1M1TiNeg2_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Ltr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Liter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'l'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'LtrPer100KiloMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Liter Per 100 Kilometer'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'l/(100km)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '100000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'LtrPerHr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Liter Per Hour'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'l/h'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '3600000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'LtrPerKiloMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Liter Per Kilometer'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'l/km'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MegaBitPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Megabit Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Mbit/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1E-06'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MegaHz'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Megahertz'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'MHz'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1E-06'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MegaJou'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Megajoule'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'MJ'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1E-06'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MegaOhm'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Megaohm'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'MΩ'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1E-06'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3INeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MegaPa'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Megapascal'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'MPa'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1E-06'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg1M1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MegaWatt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Megawatt'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'MW'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1E-06'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MicroAmpr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Microampere'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'µA'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'I1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MicroFrd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Microfarad'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'µF'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg2MNeg1Ti4I2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MicroGr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Microgram'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'µg'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MicroJou'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Microjoule'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'µJ'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MicroLtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Microliter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'µl'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MicroLtrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Microliter Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'µl/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MicroMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Micrometer'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'µm'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MicroSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Microsecond'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'µs'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Ti1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MicroTesla'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Microtesla'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'µT'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1TiNeg2INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliAmpr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Milliampere'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mA/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'I1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliAmprPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Milliampere Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mA/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1I1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliBar'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Millibar'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mbar'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.01'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg1M1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliFrd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Millifarad'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mF'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg2MNeg1Ti4I2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliGr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Milligram'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mg'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliGrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Milligram Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mg/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliJou'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Millijoule'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mJ'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliLtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Milliliter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'ml'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Millimeter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mm'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliMtrCubd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Cubic Millimeter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mm^3'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliMtrCubdPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Cubic Millimeter Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '(mm^3)/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliOhm'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Milliohm'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mΩ'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3INeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Millisecond'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'ms'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Ti1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliTesla'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Millitesla'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mT'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1TiNeg2INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliVolt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Millivolt'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mV'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliVoltPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Millivolt Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mV/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg4INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MilliWatt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Milliwatt'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mW'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Mins'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Minute'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'min'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.0166666666666667'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Ti1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Ml'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Mile'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mile'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.000621371192237333'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MlPerHr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Miles Per Hour'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mph'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '2.2369362920544'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Mol'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Mole'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mol'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Amnt1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MolPerLtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Mole Per Liter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mol/l'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg3Amnt1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MolPerLtrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Mol Per Liter Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '(mol/l)/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg3TiNeg1Amnt1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MolPerMtrCubd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Mole Per Cubic Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mol/(m^3)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg3Amnt1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MolPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Mole Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'mol/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1Amnt1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Mtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'm'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MtrCubd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Cubic Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'm^3'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MtrCubdPerHr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Cubic Meter Per Hour'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '(m^3)/h'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '3600'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MtrCubdPerHrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Cubic Meter Per Hour Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '(m^3)/(h*s)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '3600'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MtrCubdPerKiloGr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Cubic Meter Per Kilogram'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '(m^3)/kg'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len3MNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MtrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Meter Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'm/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MtrPerSecCubd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Meter Per Cubic Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'm/(s^3)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1TiNeg3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MtrPerSecSqd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Meter Per Square Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'm/(s^2)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MtrSqd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Square Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'm^2'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'MtrSqdPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Square Meter Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '(m^2)/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2Ti1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NanoFrd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Nanofarad'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'nF'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg2MNeg1Ti4I2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NanoSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Nanosecond'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'ns'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Ti1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NoUnit'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Neither Physical nor Mathematical Unit'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '-'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'NoDimension'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Nwt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Newton'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'N'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1M1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NwtMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Newtonmeter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Nm'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NwtMtrPerRpm'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Newtonmeter Per Rpm'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Nm/rpm'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.0166666666666667'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NwtMtrPerRpmPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Newtonmeter Per Rpm Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Nm/(rpm/s)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.0166666666666667'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NwtMtrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Newtonmeter Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '(N*m)/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NwtMtrSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Newtonmeter Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Nm*s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NwtMtrSqrSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Newtonmeter Square Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Nm*(s^2)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NwtPerMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Newton Per Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'N/m'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'NwtSecPerMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Newtonsecond Per Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Ns/m'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1TiNeg1_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Ohm'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Ohm'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Ω'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3INeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Pa'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Pascal'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Pa'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg1M1TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PaPerMtrCubdPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Pascal Per Cubic Meter Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Pa/((m^3)/s)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg4M1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PaPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Pascal Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Pa/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg1M1TiNeg3'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PaSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Pascal Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Pa*s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg1M1TiNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PerMille'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Permille'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '‰'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'NoDimension_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PerMin'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Per Minute'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '1/min'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '60'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PerMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Per Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '1/m'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '1/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PerSecSqd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Per Square Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '1/(s^2)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Perc'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Percent'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '%'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '100'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'NoDimension_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PercPerMilliSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Percent Per Millisecond'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '%/ms'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PercPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Percent Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = '%/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '100'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PicoFrd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Picofarad'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'pF'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg2MNeg1Ti4I2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'PicoSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Picosecond'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'ps'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Ti1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Ppm'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Parts Per Million'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'ppm'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1000000'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'NoDimension_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Rad'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Radian'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'rad'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '6.28318530717958'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'NoDimension_2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'RadPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Radian Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'rad/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '6.28318530717958'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'RadPerSecSqd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Radian Per Square Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'rad/(s^2)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '6.28318530717958'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Rpm'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Revolutions Per Minute'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'rpm'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '60'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg1_2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'RpmPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Revolutions Per Minute Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'rpm/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '60'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'TiNeg2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'S'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Siemens'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'S'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg2MNeg1Ti3I2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'SPerMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Siemens Per Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'S/m'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg3MNeg1Ti3I2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'SPerMtrPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Siemens Per Meter Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'S/(m*s)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'LenNeg3MNeg1Ti2I2'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Sec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 's'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Ti1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Tesla'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Tesla'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'T'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1TiNeg2INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Tonne'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Tonne'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 't'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Volt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Volt'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'V'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'VoltPerMilliSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Volt Per Millisecond'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'V/ms'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '0.001'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg4INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'VoltPerMtr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Volt Per Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'V/m'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1M1TiNeg3INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'VoltPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Volt Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'V/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg4INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Watt'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Watt'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'W'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg3_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'WattPerKelvinPerMtrSqd'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Watt Per Kelvin Per Square Meter'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'W/(K*m^2)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'M1TiNeg3TNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'WattPerMtrPerKelvin'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Watt Per Meter Per Kelvin'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'W/(m*K)'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len1M1TiNeg3TNeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'WattPerSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Watt Per Second'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'W/s'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg4'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'WattSec'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Wattsecond'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Ws'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2_1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Wb'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Weber'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'Wb'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '1'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Len2M1TiNeg2INeg1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    unit = ET.SubElement(elements, 'UNIT')
    short_name = ET.SubElement(unit, 'SHORT-NAME')
    short_name.text = 'Yr'
    long_name = ET.SubElement(unit, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'Year'
    l_4.attrib = {'L': 'EN'}
    display_name = ET.SubElement(unit, 'DISPLAY-NAME')
    display_name.text = 'a'
    factor_si_to_unit = ET.SubElement(unit, 'FACTOR-SI-TO-UNIT')
    factor_si_to_unit.text = '3.16880878140289E-08'
    offset_si_to_unit = ET.SubElement(unit, 'OFFSET-SI-TO-UNIT')
    offset_si_to_unit.text = '0'
    physical_dimension_ref = ET.SubElement(unit, 'PHYSICAL-DIMENSION-REF')
    physical_dimension_ref.text = 'Ti1'
    physical_dimension_ref.attrib = {'DEST': 'PHYSICAL-DIMENSION', 'BASE': 'PhysicalDimensions'}
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'AUTOSAR_Platform'
    ar_packages = ET.SubElement(ar_package, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'BaseTypes'
    category = ET.SubElement(ar_package, 'CATEGORY')
    category.text = 'STANDARD'
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'boolean'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'boolean'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '8'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = 'BOOLEAN'
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'float32'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'float32'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '32'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = 'IEEE754'
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'float64'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'float64'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '64'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = 'IEEE754'
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'sint16'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint16'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '16'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = '2C'
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'sint32'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint32'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '32'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = '2C'
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'sint64'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint64'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '64'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = '2C'
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'sint8'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint8'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '8'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = '2C'
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'uint16'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint16'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '16'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = 'NONE'
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'uint32'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint32'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '32'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = 'NONE'
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'uint64'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint64'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '64'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = 'NONE'
    sw_base_type = ET.SubElement(elements, 'SW-BASE-TYPE')
    short_name = ET.SubElement(sw_base_type, 'SHORT-NAME')
    short_name.text = 'uint8'
    long_name = ET.SubElement(sw_base_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint8'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(sw_base_type, 'CATEGORY')
    category.text = 'FIXED_LENGTH'
    base_type_size = ET.SubElement(sw_base_type, 'BASE-TYPE-SIZE')
    base_type_size.text = '8'
    base_type_encoding = ET.SubElement(sw_base_type, 'BASE-TYPE-ENCODING')
    base_type_encoding.text = 'NONE'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'CompuMethods'
    category = ET.SubElement(ar_package, 'CATEGORY')
    category.text = 'STANDARD'
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    compu_method = ET.SubElement(elements, 'COMPU-METHOD')
    short_name = ET.SubElement(compu_method, 'SHORT-NAME')
    short_name.text = 'boolean'
    category = ET.SubElement(compu_method, 'CATEGORY')
    category.text = 'TEXTTABLE'
    compu_internal_to_phys = ET.SubElement(compu_method, 'COMPU-INTERNAL-TO-PHYS')
    compu_scales = ET.SubElement(compu_internal_to_phys, 'COMPU-SCALES')
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'FALSE'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '1'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '1'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'TRUE'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'DataConstrs'
    category = ET.SubElement(ar_package, 'CATEGORY')
    category.text = 'STANDARD'
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'boolean'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '1'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'float32'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '-3.40282347e+38'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '3.40282347e+38'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'float64'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '-1.7976931348623157e+308'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '1.7976931348623157e+308'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'sint16'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '-32768'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '+32767'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'sint16_least'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '-32768'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '+32767'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'sint32'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '-2147483648'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '+2147483647'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'sint32_least'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '-2147483648'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '+2147483647'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'sint64'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '-9223372036854775808'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '9223372036854775807'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'sint8'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '-128'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '+127'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'sint8_least'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '-128'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '+127'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'uint16'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '65535'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'uint16_least'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '65535'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'uint32'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '4294967295'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'uint32_least'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '4294967295'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'uint64'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '18446744073709551615'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'uint8'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '255'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'uint8_least'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '255'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'ImplementationDataTypes'
    category = ET.SubElement(ar_package, 'CATEGORY')
    category.text = 'STANDARD'
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'ConstVoidPtr'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'ConstVoidPtr'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'DATA_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    sw_pointer_target_props = ET.SubElement(sw_data_def_props_conditional, 'SW-POINTER-TARGET-PROPS')
    target_category = ET.SubElement(sw_pointer_target_props, 'TARGET-CATEGORY')
    target_category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(sw_pointer_target_props, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_GenDef/BaseTypes/void'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    sw_impl_policy = ET.SubElement(sw_data_def_props_conditional, 'SW-IMPL-POLICY')
    sw_impl_policy.text = 'CONST'
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'VoidPtr'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'VoidPtr'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'DATA_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    sw_pointer_target_props = ET.SubElement(sw_data_def_props_conditional, 'SW-POINTER-TARGET-PROPS')
    target_category = ET.SubElement(sw_pointer_target_props, 'TARGET-CATEGORY')
    target_category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(sw_pointer_target_props, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_GenDef/BaseTypes/void'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'boolean'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'boolean'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/boolean'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    compu_method_ref = ET.SubElement(sw_data_def_props_conditional, 'COMPU-METHOD-REF')
    compu_method_ref.text = '/AUTOSAR/AUTOSAR_Platform/CompuMethods/boolean'
    compu_method_ref.attrib = {'DEST': 'COMPU-METHOD'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/boolean'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'float32'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'float32'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/float32'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/float32'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'float64'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'float64'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/float64'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/float64'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'sint16'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint16'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/sint16'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/sint16'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'sint16_least'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint16_least'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/sint16_least'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'sint32'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint32'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/sint32'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/sint32'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'sint32_least'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint32_least'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/sint32_least'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'sint64'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint64'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/sint64'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/sint64'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'sint8'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint8'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/sint8'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/sint8'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'sint8_least'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'sint8_least'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/sint8_least'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'uint16'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint16'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/uint16'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/uint16'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'uint16_least'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint16_least'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/uint16_least'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'uint32'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint32'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/uint32'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/uint32'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'uint32_least'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint32_least'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/uint32_least'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'uint64'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint64'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/uint64'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/uint64'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'uint8'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint8'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    base_type_ref = ET.SubElement(sw_data_def_props_conditional, 'BASE-TYPE-REF')
    base_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/BaseTypes/uint8'
    base_type_ref.attrib = {'DEST': 'SW-BASE-TYPE'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/uint8'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'uint8_least'
    long_name = ET.SubElement(implementation_data_type, 'LONG-NAME')
    l_4 = ET.SubElement(long_name, 'L-4')
    l_4.text = 'uint8_least'
    l_4.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'VALUE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Platform/DataConstrs/uint8_least'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Platform_Types.h'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'AUTOSAR_Std'
    ar_packages = ET.SubElement(ar_package, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'BswModuleEntrys'
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    bsw_module_entry = ET.SubElement(elements, 'BSW-MODULE-ENTRY')
    short_name = ET.SubElement(bsw_module_entry, 'SHORT-NAME')
    short_name.text = 'Std_ExtractProtocolHeaderFieldsType'
    sw_service_impl_policy = ET.SubElement(bsw_module_entry, 'SW-SERVICE-IMPL-POLICY')
    sw_service_impl_policy.text = 'STANDARD'
    bsw_entry_kind = ET.SubElement(bsw_module_entry, 'BSW-ENTRY-KIND')
    bsw_entry_kind.text = 'ABSTRACT'
    return_type = ET.SubElement(bsw_module_entry, 'RETURN-TYPE')
    short_name = ET.SubElement(return_type, 'SHORT-NAME')
    short_name.text = 'Std_ReturnType'
    category = ET.SubElement(return_type, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(return_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Std/ImplementationDataTypes/Std_ReturnType'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    arguments = ET.SubElement(bsw_module_entry, 'ARGUMENTS')
    sw_service_arg = ET.SubElement(arguments, 'SW-SERVICE-ARG')
    short_name = ET.SubElement(sw_service_arg, 'SHORT-NAME')
    short_name.text = 'buffer'
    category = ET.SubElement(sw_service_arg, 'CATEGORY')
    category.text = 'DATA_REFERENCE'
    direction = ET.SubElement(sw_service_arg, 'DIRECTION')
    direction.text = 'IN'
    sw_data_def_props = ET.SubElement(sw_service_arg, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    sw_pointer_target_props = ET.SubElement(sw_data_def_props_conditional, 'SW-POINTER-TARGET-PROPS')
    target_category = ET.SubElement(sw_pointer_target_props, 'TARGET-CATEGORY')
    target_category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(sw_pointer_target_props, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint8'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    sw_impl_policy = ET.SubElement(sw_data_def_props_conditional, 'SW-IMPL-POLICY')
    sw_impl_policy.text = 'CONST'
    sw_service_arg = ET.SubElement(arguments, 'SW-SERVICE-ARG')
    short_name = ET.SubElement(sw_service_arg, 'SHORT-NAME')
    short_name.text = 'bufferLength'
    category = ET.SubElement(sw_service_arg, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    direction = ET.SubElement(sw_service_arg, 'DIRECTION')
    direction.text = 'IN'
    sw_data_def_props = ET.SubElement(sw_service_arg, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint32'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    sw_service_arg = ET.SubElement(arguments, 'SW-SERVICE-ARG')
    short_name = ET.SubElement(sw_service_arg, 'SHORT-NAME')
    short_name.text = 'messageType'
    category = ET.SubElement(sw_service_arg, 'CATEGORY')
    category.text = 'DATA_REFERENCE'
    direction = ET.SubElement(sw_service_arg, 'DIRECTION')
    direction.text = 'OUT'
    sw_data_def_props = ET.SubElement(sw_service_arg, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    sw_pointer_target_props = ET.SubElement(sw_data_def_props_conditional, 'SW-POINTER-TARGET-PROPS')
    target_category = ET.SubElement(sw_pointer_target_props, 'TARGET-CATEGORY')
    target_category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(sw_pointer_target_props, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Std/ImplementationDataTypes/Std_MessageTypeType'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    sw_service_arg = ET.SubElement(arguments, 'SW-SERVICE-ARG')
    short_name = ET.SubElement(sw_service_arg, 'SHORT-NAME')
    short_name.text = 'messageResult'
    category = ET.SubElement(sw_service_arg, 'CATEGORY')
    category.text = 'DATA_REFERENCE'
    direction = ET.SubElement(sw_service_arg, 'DIRECTION')
    direction.text = 'OUT'
    sw_data_def_props = ET.SubElement(sw_service_arg, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    sw_pointer_target_props = ET.SubElement(sw_data_def_props_conditional, 'SW-POINTER-TARGET-PROPS')
    target_category = ET.SubElement(sw_pointer_target_props, 'TARGET-CATEGORY')
    target_category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(sw_pointer_target_props, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Std/ImplementationDataTypes/Std_MessageResultType'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'CompuMethods'
    category = ET.SubElement(ar_package, 'CATEGORY')
    category.text = 'STANDARD'
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    compu_method = ET.SubElement(elements, 'COMPU-METHOD')
    short_name = ET.SubElement(compu_method, 'SHORT-NAME')
    short_name.text = 'Std_MessageResultType'
    category = ET.SubElement(compu_method, 'CATEGORY')
    category.text = 'TEXTTABLE'
    compu_internal_to_phys = ET.SubElement(compu_method, 'COMPU-INTERNAL-TO-PHYS')
    compu_scales = ET.SubElement(compu_internal_to_phys, 'COMPU-SCALES')
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x00'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x00'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'STD_MESSAGERESULT_OK'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x01'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x01'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'STD_MESSAGERESULT_ERROR'
    compu_method = ET.SubElement(elements, 'COMPU-METHOD')
    short_name = ET.SubElement(compu_method, 'SHORT-NAME')
    short_name.text = 'Std_MessageTypeType'
    category = ET.SubElement(compu_method, 'CATEGORY')
    category.text = 'TEXTTABLE'
    compu_internal_to_phys = ET.SubElement(compu_method, 'COMPU-INTERNAL-TO-PHYS')
    compu_scales = ET.SubElement(compu_internal_to_phys, 'COMPU-SCALES')
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x00'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x00'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'STD_MESSAGETYPE_REQUEST'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x01'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x01'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'STD_MESSAGETYPE_RESPONSE'
    compu_method = ET.SubElement(elements, 'COMPU-METHOD')
    short_name = ET.SubElement(compu_method, 'SHORT-NAME')
    short_name.text = 'Std_ReturnType'
    category = ET.SubElement(compu_method, 'CATEGORY')
    category.text = 'TEXTTABLE'
    compu_internal_to_phys = ET.SubElement(compu_method, 'COMPU-INTERNAL-TO-PHYS')
    compu_scales = ET.SubElement(compu_internal_to_phys, 'COMPU-SCALES')
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'E_OK'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '1'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '1'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'E_NOT_OK'
    compu_method = ET.SubElement(elements, 'COMPU-METHOD')
    short_name = ET.SubElement(compu_method, 'SHORT-NAME')
    short_name.text = 'Std_TransformerClass'
    category = ET.SubElement(compu_method, 'CATEGORY')
    category.text = 'TEXTTABLE'
    compu_internal_to_phys = ET.SubElement(compu_method, 'COMPU-INTERNAL-TO-PHYS')
    compu_scales = ET.SubElement(compu_internal_to_phys, 'COMPU-SCALES')
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x00'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x00'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'STD_TRANSFORMER_UNSPECIFIED'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x01'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x01'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'STD_TRANSFORMER_SERIALIZER'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x02'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x02'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'STD_TRANSFORMER_SAFETY'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x03'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x03'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'STD_TRANSFORMER_SECURITY'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0xFF'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0xFF'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'STD_TRANSFORMER_CUSTOM'
    compu_method = ET.SubElement(elements, 'COMPU-METHOD')
    short_name = ET.SubElement(compu_method, 'SHORT-NAME')
    short_name.text = 'Std_TransformerForwardCode'
    category = ET.SubElement(compu_method, 'CATEGORY')
    category.text = 'TEXTTABLE'
    compu_internal_to_phys = ET.SubElement(compu_method, 'COMPU-INTERNAL-TO-PHYS')
    compu_scales = ET.SubElement(compu_internal_to_phys, 'COMPU-SCALES')
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x00'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x00'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'E_OK'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x01'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x01'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'E_SAFETY_INVALID_REP'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x02'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x02'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'E_SAFETY_INVALID_SEQ'
    compu_scale = ET.SubElement(compu_scales, 'COMPU-SCALE')
    lower_limit = ET.SubElement(compu_scale, 'LOWER-LIMIT')
    lower_limit.text = '0x03'
    lower_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    upper_limit = ET.SubElement(compu_scale, 'UPPER-LIMIT')
    upper_limit.text = '0x03'
    upper_limit.attrib = {'INTERVAL-TYPE': 'CLOSED'}
    compu_const = ET.SubElement(compu_scale, 'COMPU-CONST')
    vt = ET.SubElement(compu_const, 'VT')
    vt.text = 'E_SAFETY_INVALID_CRC'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'DataConstrs'
    category = ET.SubElement(ar_package, 'CATEGORY')
    category.text = 'STANDARD'
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'Std_MessageResultType'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0x00'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '0x02'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'Std_MessageTypeType'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0x00'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '0x02'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'Std_ReturnType'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '1'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'Std_TransformerClass'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0x00'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '0xFF'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'Std_TransformerErrorCode'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0x00'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '0xFF'
    data_constr = ET.SubElement(elements, 'DATA-CONSTR')
    short_name = ET.SubElement(data_constr, 'SHORT-NAME')
    short_name.text = 'Std_TransformerForwardCode'
    data_constr_rules = ET.SubElement(data_constr, 'DATA-CONSTR-RULES')
    data_constr_rule = ET.SubElement(data_constr_rules, 'DATA-CONSTR-RULE')
    internal_constrs = ET.SubElement(data_constr_rule, 'INTERNAL-CONSTRS')
    lower_limit = ET.SubElement(internal_constrs, 'LOWER-LIMIT')
    lower_limit.text = '0x00'
    upper_limit = ET.SubElement(internal_constrs, 'UPPER-LIMIT')
    upper_limit.text = '0x03'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'ImplementationDataTypes'
    category = ET.SubElement(ar_package, 'CATEGORY')
    category.text = 'STANDARD'
    elements = ET.SubElement(ar_package, 'ELEMENTS')
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'Std_ExtractProtocolHeaderFieldsType'
    desc = ET.SubElement(implementation_data_type, 'DESC')
    l_2 = ET.SubElement(desc, 'L-2')
    l_2.text = 'Type for the function pointer to extract the relevant protocol header fields of the message and the type of the message result of a transformer. - At the time being, this is limited to the types used for C/S communication (i.e., REQUEST and RESPONSE and OK and ERROR).'
    l_2.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'FUNCTION_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    sw_pointer_target_props = ET.SubElement(sw_data_def_props_conditional, 'SW-POINTER-TARGET-PROPS')
    target_category = ET.SubElement(sw_pointer_target_props, 'TARGET-CATEGORY')
    target_category.text = 'FUNCTION_REFERENCE'
    function_pointer_signature_ref = ET.SubElement(sw_pointer_target_props, 'FUNCTION-POINTER-SIGNATURE-REF')
    function_pointer_signature_ref.text = '/AUTOSAR/AUTOSAR_Std/BswModuleEntrys/Std_ExtractProtocolHeaderFieldsType'
    function_pointer_signature_ref.attrib = {'DEST': 'BSW-MODULE-ENTRY'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Std_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'Std_MessageResultType'
    desc = ET.SubElement(implementation_data_type, 'DESC')
    l_2 = ET.SubElement(desc, 'L-2')
    l_2.text = 'This type is used to encode different types of results for response messages. - Currently this encoding is limited to the distinction between OK and ERROR responses.'
    l_2.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    compu_method_ref = ET.SubElement(sw_data_def_props_conditional, 'COMPU-METHOD-REF')
    compu_method_ref.text = '/AUTOSAR/AUTOSAR_Std/CompuMethods/Std_MessageResultType'
    compu_method_ref.attrib = {'DEST': 'COMPU-METHOD'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Std/DataConstrs/Std_MessageResultType'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint8'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Std_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'Std_MessageTypeType'
    desc = ET.SubElement(implementation_data_type, 'DESC')
    l_2 = ET.SubElement(desc, 'L-2')
    l_2.text = 'This type is used to encode the different type of messages. - Currently this encoding is limited to the distinction between requests and responses in C/S communication.'
    l_2.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    compu_method_ref = ET.SubElement(sw_data_def_props_conditional, 'COMPU-METHOD-REF')
    compu_method_ref.text = '/AUTOSAR/AUTOSAR_Std/CompuMethods/Std_MessageTypeType'
    compu_method_ref.attrib = {'DEST': 'COMPU-METHOD'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Std/DataConstrs/Std_MessageTypeType'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint8'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Std_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'Std_ReturnType'
    desc = ET.SubElement(implementation_data_type, 'DESC')
    l_2 = ET.SubElement(desc, 'L-2')
    l_2.text = 'This type can be used as standard API return type which is shared between the RTE and the BSW modules. It shall be defined as follows: typedef uint8 Std_ReturnType;'
    l_2.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    compu_method_ref = ET.SubElement(sw_data_def_props_conditional, 'COMPU-METHOD-REF')
    compu_method_ref.text = '/AUTOSAR/AUTOSAR_Std/CompuMethods/Std_ReturnType'
    compu_method_ref.attrib = {'DEST': 'COMPU-METHOD'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Std/DataConstrs/Std_ReturnType'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint8'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Std_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'Std_TransformerClass'
    desc = ET.SubElement(implementation_data_type, 'DESC')
    l_2 = ET.SubElement(desc, 'L-2')
    l_2.text = 'Std_TransformerClass is an enumeration where each element represents a transformer class.'
    l_2.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    compu_method_ref = ET.SubElement(sw_data_def_props_conditional, 'COMPU-METHOD-REF')
    compu_method_ref.text = '/AUTOSAR/AUTOSAR_Std/CompuMethods/Std_TransformerClass'
    compu_method_ref.attrib = {'DEST': 'COMPU-METHOD'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Std/DataConstrs/Std_TransformerClass'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint8'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Std_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'Std_TransformerError'
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'STRUCTURE'
    sub_elements = ET.SubElement(implementation_data_type, 'SUB-ELEMENTS')
    implementation_data_type_element = ET.SubElement(sub_elements, 'IMPLEMENTATION-DATA-TYPE-ELEMENT')
    short_name = ET.SubElement(implementation_data_type_element, 'SHORT-NAME')
    short_name.text = 'errorCode'
    category = ET.SubElement(implementation_data_type_element, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type_element, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Std/ImplementationDataTypes/Std_TransformerErrorCode'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    implementation_data_type_element = ET.SubElement(sub_elements, 'IMPLEMENTATION-DATA-TYPE-ELEMENT')
    short_name = ET.SubElement(implementation_data_type_element, 'SHORT-NAME')
    short_name.text = 'transformerClass'
    category = ET.SubElement(implementation_data_type_element, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type_element, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Std/ImplementationDataTypes/Std_TransformerClass'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Std_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'Std_TransformerErrorCode'
    desc = ET.SubElement(implementation_data_type, 'DESC')
    l_2 = ET.SubElement(desc, 'L-2')
    l_2.text = 'The type of the Std_TransformerError.'
    l_2.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Std/DataConstrs/Std_TransformerErrorCode'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint8'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Std_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'Std_TransformerForwardCode'
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    compu_method_ref = ET.SubElement(sw_data_def_props_conditional, 'COMPU-METHOD-REF')
    compu_method_ref.text = '/AUTOSAR/AUTOSAR_Std/CompuMethods/Std_TransformerForwardCode'
    compu_method_ref.attrib = {'DEST': 'COMPU-METHOD'}
    data_constr_ref = ET.SubElement(sw_data_def_props_conditional, 'DATA-CONSTR-REF')
    data_constr_ref.text = '/AUTOSAR/AUTOSAR_Std/DataConstrs/Std_TransformerForwardCode'
    data_constr_ref.attrib = {'DEST': 'DATA-CONSTR'}
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint8'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Std_Types.h'
    implementation_data_type = ET.SubElement(elements, 'IMPLEMENTATION-DATA-TYPE')
    short_name = ET.SubElement(implementation_data_type, 'SHORT-NAME')
    short_name.text = 'Std_VersionInfoType'
    desc = ET.SubElement(implementation_data_type, 'DESC')
    l_2 = ET.SubElement(desc, 'L-2')
    l_2.text = 'This type shall be used to request the version of a BSW module using the <Module name>_GetVersionInfo() function.'
    l_2.attrib = {'L': 'EN'}
    category = ET.SubElement(implementation_data_type, 'CATEGORY')
    category.text = 'STRUCTURE'
    sub_elements = ET.SubElement(implementation_data_type, 'SUB-ELEMENTS')
    implementation_data_type_element = ET.SubElement(sub_elements, 'IMPLEMENTATION-DATA-TYPE-ELEMENT')
    short_name = ET.SubElement(implementation_data_type_element, 'SHORT-NAME')
    short_name.text = 'vendorID'
    category = ET.SubElement(implementation_data_type_element, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type_element, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint16'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    implementation_data_type_element = ET.SubElement(sub_elements, 'IMPLEMENTATION-DATA-TYPE-ELEMENT')
    short_name = ET.SubElement(implementation_data_type_element, 'SHORT-NAME')
    short_name.text = 'moduleID'
    category = ET.SubElement(implementation_data_type_element, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type_element, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint16'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    implementation_data_type_element = ET.SubElement(sub_elements, 'IMPLEMENTATION-DATA-TYPE-ELEMENT')
    short_name = ET.SubElement(implementation_data_type_element, 'SHORT-NAME')
    short_name.text = 'sw_major_version'
    category = ET.SubElement(implementation_data_type_element, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type_element, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint8'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    implementation_data_type_element = ET.SubElement(sub_elements, 'IMPLEMENTATION-DATA-TYPE-ELEMENT')
    short_name = ET.SubElement(implementation_data_type_element, 'SHORT-NAME')
    short_name.text = 'sw_minor_version'
    category = ET.SubElement(implementation_data_type_element, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type_element, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint8'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    implementation_data_type_element = ET.SubElement(sub_elements, 'IMPLEMENTATION-DATA-TYPE-ELEMENT')
    short_name = ET.SubElement(implementation_data_type_element, 'SHORT-NAME')
    short_name.text = 'sw_patch_version'
    category = ET.SubElement(implementation_data_type_element, 'CATEGORY')
    category.text = 'TYPE_REFERENCE'
    sw_data_def_props = ET.SubElement(implementation_data_type_element, 'SW-DATA-DEF-PROPS')
    sw_data_def_props_variants = ET.SubElement(sw_data_def_props, 'SW-DATA-DEF-PROPS-VARIANTS')
    sw_data_def_props_conditional = ET.SubElement(sw_data_def_props_variants, 'SW-DATA-DEF-PROPS-CONDITIONAL')
    implementation_data_type_ref = ET.SubElement(sw_data_def_props_conditional, 'IMPLEMENTATION-DATA-TYPE-REF')
    implementation_data_type_ref.text = '/AUTOSAR/AUTOSAR_Platform/ImplementationDataTypes/uint8'
    implementation_data_type_ref.attrib = {'DEST': 'IMPLEMENTATION-DATA-TYPE'}
    type_emitter = ET.SubElement(implementation_data_type, 'TYPE-EMITTER')
    type_emitter.text = 'Std_Types.h'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'Communication'
    ar_packages = ET.SubElement(ar_package, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'CommunicationClusters'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'Frames'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'ISignals'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'Pdus'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'SystemSignals'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'EcuInstances'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '9ae99405-7be6-41c0-ad56-a5fa909a1e5c'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'RootSWComposition'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'SharedElements'
    ar_packages = ET.SubElement(ar_package, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'ApplicationDataTypes'
    ar_packages = ET.SubElement(ar_package, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '035a8ab9-015a-426c-8766-e4b58e5c5a98'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'Array'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': 'b142aaa0-2671-41cd-bbc6-78cc30cf22c4'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'Primitive'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '65217d8d-3662-4a20-a643-ec9ee94de7a0'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'Record'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'CompuMethods'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'ConstantSpecifications'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '6fcb326d-7f82-4cd3-9429-fa90f212d1e8'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'ConstantTypeMappingSets'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '5b7c99d1-d4ef-481b-95e4-0d6975de4f3b'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'DataConstr'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '463cbb86-4f8e-463e-8bb3-dafc528ccbdf'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'DataTypemappingSets'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'ImplementationDataTypes'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'PortInterfaces'
    ar_packages = ET.SubElement(ar_package, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': 'a0d0a13a-15e8-47a3-8169-5f11ad6c7d3f'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'ClientServer'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '3503a605-12c8-44be-96cf-4ad548d5d58f'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'ModeSwitch'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '07677b4a-bc79-4c7b-afa1-581ad642a3dd'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'NvData'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '9b48ec34-87aa-4f84-9080-1d3f919ca090'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'Parameter'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '304f7bbd-15e6-4f85-b22f-4b02c9a5631c'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'SenderReceiver'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '00421379-584f-4dbb-8c9f-d70ad66b8e41'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'Trigger'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': 'a21c4095-c5dd-41b4-8a15-aa23a460a3e9'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'SWCImpl'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': 'fc8b946c-31d4-49d6-8e0c-ff6847ede7f5'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'SwAddrMethods'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'SwComponentTypes'
    ar_packages = ET.SubElement(ar_package, 'AR-PACKAGES')
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '7e1cfec7-fc85-4615-9df0-46ddc1fdaa09'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'ApplSWC'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '7f0b665f-81ab-462f-aeab-1777b0f9dfd8'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'CddSWC'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': 'a9d129de-eda4-4cda-9025-70a56f38fb59'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'CompSWC'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '28aa9cf2-4118-4878-8504-271a3ed4600b'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'EcuAbSWC'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '8562405a-26a1-4c3d-861f-eb0745310572'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'NvDataSWC'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '0a54c44d-f71e-4ec3-bbf1-410c0b885915'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'PrmSWC'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': 'f142ef66-4dce-4750-8568-a7e836f462da'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'SnsrActSWC'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '60bb3f96-0a5c-4e30-bdda-5205f3a1cdb6'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'SrvcPrxySWC'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    ar_package.attrib = {'UUID': '2ed6bb1a-c9d6-46c0-ae8b-0743080405b6'}
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'SrvcSWC'
    ar_package = ET.SubElement(ar_packages, 'AR-PACKAGE')
    short_name = ET.SubElement(ar_package, 'SHORT-NAME')
    short_name.text = 'Systems'

    # Save the XML tree to an ARXML file
    tree = ET.ElementTree(root)
    # tree.write('output.arxml', encoding='utf-8', xml_declaration=True)
    # Write to file with double quotes in the XML declaration
    # with open("output2.arxml", "wb") as f:
    #     f.write(b'<?xml version="1.0" encoding="utf-8"?>\n')
    #     tree.write(f, encoding="utf-8", xml_declaration=False)

    try:
      root1 = tree.getroot()

      # Remove namespaces
      root2 = remove_namespaces(root1)

      # Add indentation
      indent(root2)

      # Write the XML declaration with double quotes
      with open("output3.arxml", "wb") as f:
        f.write(b'<?xml version="1.0" encoding="utf-8"?>\n')
        tree.write(f, encoding="utf-8", xml_declaration=False)

      print(f"Successfully created with proper indentation and XML declaration.")

    except FileNotFoundError as e:
      print(f"Error: {e}. Please enter a valid ARXML file path.")





if __name__ == '__main__':
    create_arxml()
